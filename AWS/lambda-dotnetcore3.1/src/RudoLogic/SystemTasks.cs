using System.Collections.Generic;
using System;
using System.Text.Json;
using System.Text;
using Amazon.Lambda.APIGatewayEvents;
using Amazon.Lambda.Core;
using Amazon.Lambda.Serialization.SystemTextJson;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Nethereum.Web3;
using Nethereum.Web3.Accounts;
using Nethereum.Hex.HexTypes;

// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]
namespace RudoNamespace
{
    public class testingxd{
        public string uno{get;set;}
        public int dos{get;set;}
    }
    public class SystemTasks
    {
        string CONTRACT_ADDRESS = "0x498C9816b77C371B35D532e7664f69C911D7cF70";
        string GAMER_CONTROLLER_ADDRESS = "";
        string ABI = @"[{'inputs':[{'internalType':'string','name':'_name','type':'string'},{'internalType':'string','name':'_symbol','type':'string'}],'stateMutability':'nonpayable','type':'constructor'},{'inputs':[{'internalType':'address','name':'have','type':'address'},{'internalType':'address','name':'want','type':'address'}],'name':'OnlyCoordinatorCanFulfill','type':'error'},{'anonymous':false,'inputs':[{'indexed':true,'internalType':'address','name':'owner','type':'address'},{'indexed':true,'internalType':'address','name':'approved','type':'address'},{'indexed':true,'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'Approval','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'internalType':'address','name':'owner','type':'address'},{'indexed':true,'internalType':'address','name':'operator','type':'address'},{'indexed':false,'internalType':'bool','name':'approved','type':'bool'}],'name':'ApprovalForAll','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'uint256','name':'id','type':'uint256'},{'indexed':false,'internalType':'uint32','name':'experience','type':'uint32'}],'name':'GainExp','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'uint256','name':'id','type':'uint256'},{'indexed':false,'internalType':'uint8','name':'level','type':'uint8'},{'indexed':false,'internalType':'uint16','name':'skillId','type':'uint16'}],'name':'LevelUp_Skill','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'uint256','name':'id','type':'uint256'},{'indexed':false,'internalType':'uint8','name':'level','type':'uint8'},{'indexed':false,'internalType':'uint16','name':'vitality','type':'uint16'},{'indexed':false,'internalType':'uint16','name':'strength','type':'uint16'},{'indexed':false,'internalType':'uint16','name':'agility','type':'uint16'},{'indexed':false,'internalType':'uint16','name':'velocity','type':'uint16'}],'name':'LevelUp_Stats','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'string','name':'logMessage','type':'string'},{'indexed':false,'internalType':'uint256','name':'logNumber','type':'uint256'}],'name':'Log','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'uint256','name':'rudoChallenging','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'rudoChallenged','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'seed','type':'uint256'},{'indexed':false,'internalType':'uint256','name':'version','type':'uint256'}],'name':'NewDuel','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'internalType':'address','name':'owner','type':'address'},{'indexed':false,'internalType':'uint256','name':'id','type':'uint256'},{'indexed':false,'internalType':'string','name':'name','type':'string'},{'indexed':false,'internalType':'uint16','name':'vitality','type':'uint16'},{'indexed':false,'internalType':'uint16','name':'strength','type':'uint16'},{'indexed':false,'internalType':'uint16','name':'agility','type':'uint16'},{'indexed':false,'internalType':'uint16','name':'velocity','type':'uint16'}],'name':'NewRudo','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'internalType':'address','name':'previousOwner','type':'address'},{'indexed':true,'internalType':'address','name':'newOwner','type':'address'}],'name':'OwnershipTransferred','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'internalType':'address','name':'from','type':'address'},{'indexed':true,'internalType':'address','name':'to','type':'address'},{'indexed':true,'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'Transfer','type':'event'},{'inputs':[{'internalType':'uint256','name':'id','type':'uint256'}],'name':'GetLevelIncreases','outputs':[{'components':[{'internalType':'enumRudo.LvlIncType','name':'choiseType','type':'uint8'},{'internalType':'uint16[4]','name':'statsIncrease','type':'uint16[4]'}],'internalType':'structRudo.LevelIncreaseChoise[3]','name':'','type':'tuple[3]'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'id','type':'uint256'}],'name':'GetSkills','outputs':[{'internalType':'uint16[]','name':'','type':'uint16[]'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'string','name':'_name','type':'string'}],'name':'RequestRandomRudo','outputs':[],'stateMutability':'payable','type':'function'},{'inputs':[],'name':'_createRudo2','outputs':[],'stateMutability':'payable','type':'function'},{'inputs':[{'internalType':'address','name':'to','type':'address'},{'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'approve','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'owner','type':'address'}],'name':'balanceOf','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'rudoId','type':'uint256'},{'internalType':'uint16','name':'ammount','type':'uint16'}],'name':'buyExp','outputs':[],'stateMutability':'payable','type':'function'},{'inputs':[{'internalType':'uint256','name':'rudoChallenging','type':'uint256'},{'internalType':'uint256','name':'rudoChallenged','type':'uint256'}],'name':'duel','outputs':[],'stateMutability':'payable','type':'function'},{'inputs':[],'name':'gameController','outputs':[{'internalType':'address','name':'','type':'address'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'getApproved','outputs':[{'internalType':'address','name':'','type':'address'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'address','name':'owner','type':'address'},{'internalType':'address','name':'operator','type':'address'}],'name':'isApprovedForAll','outputs':[{'internalType':'bool','name':'','type':'bool'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'rudoId','type':'uint256'},{'internalType':'uint8','name':'choiseIndex','type':'uint8'}],'name':'levelUp','outputs':[],'stateMutability':'payable','type':'function'},{'inputs':[],'name':'name','outputs':[{'internalType':'string','name':'','type':'string'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'','type':'uint256'}],'name':'naturesCount','outputs':[{'internalType':'uint8','name':'','type':'uint8'}],'stateMutability':'view','type':'function'},{'inputs':[],'name':'owner','outputs':[{'internalType':'address','name':'','type':'address'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'ownerOf','outputs':[{'internalType':'address','name':'','type':'address'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'requestId','type':'uint256'},{'internalType':'uint256[]','name':'randomWords','type':'uint256[]'}],'name':'rawFulfillRandomWords','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[],'name':'renounceOwnership','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'uint256','name':'','type':'uint256'}],'name':'requestToCharacterName','outputs':[{'internalType':'string','name':'','type':'string'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'','type':'uint256'}],'name':'requestToSender','outputs':[{'internalType':'address','name':'','type':'address'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'','type':'uint256'}],'name':'rudos','outputs':[{'internalType':'string','name':'name','type':'string'},{'internalType':'uint8','name':'level','type':'uint8'},{'internalType':'uint8','name':'nature','type':'uint8'},{'internalType':'uint16','name':'vitality','type':'uint16'},{'internalType':'uint16','name':'strength','type':'uint16'},{'internalType':'uint16','name':'agility','type':'uint16'},{'internalType':'uint16','name':'velocity','type':'uint16'},{'internalType':'uint16','name':'experience','type':'uint16'},{'internalType':'bool','name':'nextSkillsReady','type':'bool'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'address','name':'from','type':'address'},{'internalType':'address','name':'to','type':'address'},{'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'safeTransferFrom','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'from','type':'address'},{'internalType':'address','name':'to','type':'address'},{'internalType':'uint256','name':'tokenId','type':'uint256'},{'internalType':'bytes','name':'_data','type':'bytes'}],'name':'safeTransferFrom','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'operator','type':'address'},{'internalType':'bool','name':'approved','type':'bool'}],'name':'setApprovalForAll','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'_gameController','type':'address'}],'name':'setGameController','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'uint256','name':'id','type':'uint256'},{'components':[{'internalType':'enumRudo.LvlIncType','name':'choiseType','type':'uint8'},{'internalType':'uint16[4]','name':'statsIncrease','type':'uint16[4]'}],'internalType':'structRudo.LevelIncreaseChoise','name':'lvlinc1','type':'tuple'},{'components':[{'internalType':'enumRudo.LvlIncType','name':'choiseType','type':'uint8'},{'internalType':'uint16[4]','name':'statsIncrease','type':'uint16[4]'}],'internalType':'structRudo.LevelIncreaseChoise','name':'lvlinc2','type':'tuple'},{'components':[{'internalType':'enumRudo.LvlIncType','name':'choiseType','type':'uint8'},{'internalType':'uint16[4]','name':'statsIncrease','type':'uint16[4]'}],'internalType':'structRudo.LevelIncreaseChoise','name':'lvlinc3','type':'tuple'}],'name':'setNext3Skills','outputs':[],'stateMutability':'payable','type':'function'},{'inputs':[{'components':[{'internalType':'enumRudo.LvlIncType','name':'choiseType','type':'uint8'},{'internalType':'uint16[4]','name':'statsIncrease','type':'uint16[4]'}],'internalType':'structRudo.LevelIncreaseChoise','name':'lvlinc2','type':'tuple'}],'name':'setNext3Skills2','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'bytes4','name':'interfaceId','type':'bytes4'}],'name':'supportsInterface','outputs':[{'internalType':'bool','name':'','type':'bool'}],'stateMutability':'view','type':'function'},{'inputs':[],'name':'symbol','outputs':[{'internalType':'string','name':'','type':'string'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'index','type':'uint256'}],'name':'tokenByIndex','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'address','name':'owner','type':'address'},{'internalType':'uint256','name':'index','type':'uint256'}],'name':'tokenOfOwnerByIndex','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'tokenURI','outputs':[{'internalType':'string','name':'','type':'string'}],'stateMutability':'view','type':'function'},{'inputs':[],'name':'totalSupply','outputs':[{'internalType':'uint256','name':'','type':'uint256'}],'stateMutability':'view','type':'function'},{'inputs':[{'internalType':'address','name':'from','type':'address'},{'internalType':'address','name':'to','type':'address'},{'internalType':'uint256','name':'tokenId','type':'uint256'}],'name':'transferFrom','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'address','name':'newOwner','type':'address'}],'name':'transferOwnership','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'uint32','name':'_callbackGasLimit','type':'uint32'}],'name':'updateCallbackGasLimit','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[{'internalType':'uint256','name':'_fee','type':'uint256'}],'name':'updateFee','outputs':[],'stateMutability':'nonpayable','type':'function'},{'inputs':[],'name':'withdraw','outputs':[],'stateMutability':'payable','type':'function'}]";
        public SystemTasks(){

        }

        public async Task<APIGatewayProxyResponse> UpdateSystem(APIGatewayProxyRequest apigProxyEvent, ILambdaContext context)
        {
            JObject jo = JObject.Parse(apigProxyEvent.Body);
            Console.Write(apigProxyEvent.Body);
            var privateKey = "0x2b5416f3fb485a34ff7ac21f1831c58c2a385f6e346b3ea6fc5800fc0d534929";
            var account = new Account(privateKey,97);
		    var web3 = new Web3(account,"https://data-seed-prebsc-1-s1.binance.org:8545/");
            web3.TransactionManager.UseLegacyAsDefault = true;
            var contract = web3.Eth.GetContract(ABI, CONTRACT_ADDRESS);
            var function = contract.GetFunction("setNext3Skills");
            object[] paramss =  
                new object[4]{ ((int)jo["id"]), 
                new object[2]{ ((int)jo["lvlinc1"]["choiseType"]), new int[4]{  ((int)jo["lvlinc1"]["statsIncrease"]["stat1"]), 
                                                                                ((int)jo["lvlinc1"]["statsIncrease"]["stat2"]),
                                                                                ((int)jo["lvlinc1"]["statsIncrease"]["stat3"]),
                                                                                ((int)jo["lvlinc1"]["statsIncrease"]["stat4"])}}, 
                new object[2]{ ((int)jo["lvlinc2"]["choiseType"]), new int[4]{  ((int)jo["lvlinc2"]["statsIncrease"]["stat1"]),
                                                                                ((int)jo["lvlinc2"]["statsIncrease"]["stat2"]),
                                                                                ((int)jo["lvlinc2"]["statsIncrease"]["stat3"]),
                                                                                ((int)jo["lvlinc2"]["statsIncrease"]["stat4"])}}, 
                new object[2]{ ((int)jo["lvlinc3"]["choiseType"]), new int[4]{  ((int)jo["lvlinc3"]["statsIncrease"]["stat1"]), 
                                                                                ((int)jo["lvlinc3"]["statsIncrease"]["stat2"]),
                                                                                ((int)jo["lvlinc3"]["statsIncrease"]["stat3"]),
                                                                                ((int)jo["lvlinc3"]["statsIncrease"]["stat4"])}}};
            //await function.CallAsync<void>(from: account.Address,gas: new HexBigInteger(500000),value: new HexBigInteger(500000));
            var gas = await function.EstimateGasAsync(from: account.Address, gas: null, value: null, functionInput: paramss);
            var result = await function.SendTransactionAsync(from: account.Address, gas: gas, value: null, functionInput: paramss);

            Console.WriteLine(result);

            return new APIGatewayProxyResponse
            {
                Body = JsonSerializer.Serialize("result"),
                StatusCode = 200,
                Headers = new Dictionary<string, string> { { "Content-Type", "application/json" } }
            };
        }
    }
}